import numpy as np
import pandas as pd
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline
from quantopian.pipeline.classifiers.morningstar import Sector
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.data import morningstar as mstar
from quantopian.pipeline.factors import (
    AverageDollarVolume,
    CustomFactor
)
from quantopian.pipeline.filters import Q1500US,Q500US
from quantopian.pipeline.filters.morningstar import IsPrimaryShare

from quantopian.pipeline.factors.eventvestor import (
    BusinessDaysUntilNextEarnings,
    BusinessDaysSincePreviousEarnings,
    BusinessDaysSinceBuybackAuth,
)

from quantopian.pipeline.data.eventvestor import BuybackAuthorizations

import quantopian.experimental.optimize as opt
import quantopian.algorithm as algo

MAX_GROSS_LEVERAGE = 1.0

def make_pipeline():
    """
    Create and return our pipeline.

    We break this piece of logic out into its own function to make it easier to
    test and modify in isolation.

    In particular, this function can be copy/pasted into research and run
    by itself.
    """
    # When current day is 6 days from a buyback announcement
    # and 10 days from an earnings
    till_earnings = BusinessDaysUntilNextEarnings()
    since_buybacks = BusinessDaysSinceBuybackAuth()
    since_earnings = BusinessDaysSincePreviousEarnings()

    # Strategy 1A: When there is a buyback announcement with a
    # known future earnings date at least 1 day ahead, go long
    # on the security starting on the buyback announcement date
    # for 25 days starting on day t-15
    # |-------buybacks & earnings-------| (earnings_announcement)
    longs = ((since_buybacks + till_earnings) <= 15) & \
            since_buybacks.notnan() & till_earnings.notnan()

    return Pipeline(
        columns={
            'till_earnings': till_earnings,
            'since_buybacks': since_buybacks,
            'since_earnings': since_earnings,
            'market_cap': mstar.valuation.market_cap.latest,
            'buyback_unit': BuybackAuthorizations.previous_unit.latest,
            'buyback_amount': BuybackAuthorizations.previous_amount.latest,
            'pricing': USEquityPricing.close.latest,
            'longs': longs
        },
        screen=(longs & Q500US())
    )


def initialize(context):
    # Hold for a period of [-10, +15)
    context.days_to_hold = 25

    # Declares which stocks we currently held
    # and how many days we've held them dict[stock:days_held]
    context.stocks_held = {}

    # Make our pipeline
    algo.attach_pipeline(make_pipeline(), 'buybacks_and_earnings')

    # Order our positions
    algo.schedule_function(func=order_positions,
                      date_rule=date_rules.every_day(),
                      time_rule=time_rules.market_open())

    context.longs = None


def before_trading_start(context, data):
    results = pipeline_output('buybacks_and_earnings')
    log.info("Results: %r" % results)
    if len(results.index) == 0:
        return

    # Only look at buybacks > 5%
    results = results.apply(lambda row: convert_units(row), axis=1)
    results = results[results['Percent of SO'] > .05]
    assets_in_universe = results.index
    context.longs = assets_in_universe[results.longs]

    for stock in context.longs:
        log.info("\n")
        log.info("%s: %s days since buyback and %s left till earnings"
                 % (stock.symbol, results.ix[stock]['since_buybacks'],
                    results.ix[stock]['till_earnings']))


def convert_units(row):
    buyback_unit = row['buyback_unit']
    market_cap = row['market_cap']
    shares_outstanding = market_cap/row['pricing']
    if buyback_unit == '$M':
        total_bought = row['buyback_amount'] * 1000000.0
        percent_bought = (total_bought)/market_cap
    elif buyback_unit == "Mshares":
        percent_bought = row['buyback_amount']/shares_outstanding
    elif buyback_unit == '%':
        percent_bought = row['buyback_amount']/100.0
    else:
        percent_bought = None

    row['Percent of SO'] = percent_bought
    return row

def order_positions(context, data):
    """
    Main ordering conditions to always order an equal percentage in each
    position so it does a rolling rebalance by looking at the stocks to
    order today and the stocks we currently hold in our portfolio.
    """
    port = context.portfolio.positions
    record(leverage=context.account.leverage,
           positions=len(context.portfolio.positions))
    
    weights = {}

    # Check if we've exited our positions and if we haven't, exit the
    # remaining securities that we have left
    for security in port:
        if data.can_trade(security):
            if context.stocks_held.get(security) is not None:
                context.stocks_held[security] += 1
                if context.stocks_held[security] >= context.days_to_hold:
                    # order_target_percent(security, 0)
                    weights[security] = 0
                    del context.stocks_held[security]
            # If we've deleted it but it still hasn't been exited.
            # Try exiting again
            else:
                log.info("Haven't yet exited %s, ordering again" %
                         security.symbol)
                # order_target_percent(security, 0)
                weights[security] = 0

    if context.longs is None:
        return

    # Check our current positions
    current_longs = [pos for pos in port if
                     (port[pos].amount > 0 and pos in context.stocks_held)]
    all_longs = context.longs.tolist() + current_longs

    # Rebalance our long securities (existing + new)
    for security in all_longs:
        can_trade = context.stocks_held.get(security) <= context.days_to_hold or \
            context.stocks_held.get(security) is None
        if data.can_trade(security) and can_trade:
            # order_target_percent(security, 1.0 / len(all_longs))
            weights[security] = 1.0 / len(all_longs)
            if context.stocks_held.get(security) is None:
                context.stocks_held[security] = 0
    
    universe = set(all_longs)
    
    if len(universe) == 0:
        return
    
    objective = opt.TargetPortfolioWeights(weights)
    
    leverage_constraint = opt.MaxGrossLeverage(MAX_GROSS_LEVERAGE)
    
    algo.order_optimal_portfolio(
        objective=objective,
        constraints=[
            leverage_constraint
        ],
        universe=universe
    )
